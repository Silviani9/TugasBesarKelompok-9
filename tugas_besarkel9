#include <GL/glut.h>
#include <stdlib.h>

// ---fadhil
const int NUM_STARS = 20; 
float stars[NUM_STARS][3]; 
int POV = 0; 

bool showCartecius = true; 


float angleMerqurius = 0.0;
float angleVenus = 0.0;
float angleBumi = 0.0;
float angleMars = 0.0;


float radiusMerqurius = 0.2;
float radiusVenus = 0.2;
float radiusBumi = 0.2;
float radiusMars = 0.15;

float xPosMerqurius = 2.0;
float xPosVenus = 3.0;
float xPosBumi = 4.0;
float xPosMars = 5.0;


GLfloat light_position[] = {-1.0, 0.0, 0.0, 0.0};

// ----------(Inisialisasi bintang)--------
void initStars() {
    for (int i = 0; i < NUM_STARS; i++) {
        stars[i][0] = (float)(rand() % 201 - 100) / 10.0; // Posisi X
        stars[i][1] = (float)(rand() % 201 - 100) / 10.0; // Posisi Y
        stars[i][2] = (float)(rand() % 201 - 100) / 10.0; // Posisi Z
    }
}

// ----------(Menggambar bintang)--------
void drawStars() {
    glColor3ub(255, 255, 255); 
    for (int i = 0; i < NUM_STARS; i++) {
        glPushMatrix();
        glTranslatef(stars[i][0], stars[i][1], stars[i][2]); 
        glutSolidSphere(0.02, 10, 10); 
        glPopMatrix();
    }
}

// ----------(Menggambar sumbu kartesius)--------
void cartecius() {
    if (!showCartecius)
        return;

    glLineWidth(1);
    glBegin(GL_LINES);

    glColor3f(0.0, 0.0, 1.0); // Sumbu X (biru)
    glVertex3f(-500.0, 0.0, 0.0);
    glVertex3f(500.0, 0.0, 0.0);

    glColor3f(0.0, 1.0, 0.0); // Sumbu Y (hijau)
    glVertex3f(0.0, -500.0, 0.0);
    glVertex3f(0.0, 500.0, 0.0);

    glColor3f(1.0, 0.0, 0.0); // Sumbu Z (merah)
    glVertex3f(0.0, 0.0, -500.0);
    glVertex3f(0.0, 0.0, 500.0);

    glEnd();
}
// -----------SILVI------
// ----------(Menggambar gedung )--------
void drawBuilding() {
    // Dasar gedung
    glPushMatrix();
    glColor3ub(150, 150, 150);
    glTranslatef(0.0, 0.3, 0.0); 
    glScalef(0.4, -0.2, 0.4); 
    glutSolidCube(1.0); 
    glPopMatrix();

    // Bagian tengah gedung
    glPushMatrix();
    glColor3ub(100, 100, 100);
    glTranslatef(0.0, 1.2, 0.0);
    glScalef(0.3, 1.8, 0.3);
    glutSolidCube(1.0);
    glPopMatrix();

    // Atap gedung
    glPushMatrix();
    glColor3ub(200, 50, 50);
    glTranslatef(0.0, 2.0, 0.0);
    glScalef(0.5, 0.3, 0.5);
    glutSolidCube(1.0);
    glPopMatrix();

    // Antena di atas gedung
    glPushMatrix();
    glColor3ub(255, 255, 255);
    glTranslatef(0.0, 2.5, 0.0);
    glScalef(0.05, 0.6, 0.05);
    glutSolidCube(1.0);
    glPopMatrix();
}

// ----------(Fungsi display utama)--------
void display() {
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); // Bersihkan layar
    glLoadIdentity();

    // Atur pencahayaan
    glEnable(GL_LIGHTING);
    glEnable(GL_LIGHT0);
    GLfloat light_ambient[] = {0.1, 0.1, 0.1, 1.0};
    GLfloat light_diffuse[] = {1.0, 1.0, 1.0, 1.0};
    glLightfv(GL_LIGHT0, GL_POSITION, light_position);
    glLightfv(GL_LIGHT0, GL_AMBIENT, light_ambient);
    glLightfv(GL_LIGHT0, GL_DIFFUSE, light_diffuse);

    // Atur posisi kamera
    if (POV == 0)
        gluLookAt(10.0, 5.0, 10.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0);
    else if (POV == 1)
        gluLookAt(20.0, 15.0, 20.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0);

    drawStars(); 
    cartecius(); 

    // Matahari
    glPushMatrix();
    glColor3ub(222, 34, 0);
    glutSolidSphere(0.9, 20, 20); 
    glPopMatrix();

    // ---------( Merkurius)--------
    glPushMatrix();
    angleMerqurius += 4.2; 
    glRotatef(angleMerqurius, 0.0, 1.0, 0.0);
    glTranslatef(xPosMerqurius, 0.0, 0.0);
    glColor3ub(87, 93, 93);
    glutSolidSphere(radiusMerqurius, 50, 50);
    glPopMatrix();

    // ---------( Venus)--------
    glPushMatrix();
    angleVenus += 3.15; 
    glRotatef(angleVenus, 0.0, 1.0, 0.0);
    glTranslatef(xPosVenus, 0.0, 0.0);
    glColor3ub(255, 127, 80);
    glutSolidSphere(radiusVenus, 50, 50);
    glPopMatrix();

    // ---------( Bumi )--------
    glPushMatrix();
    angleBumi += 2.10; 
    glRotatef(angleBumi, 0.0, 1.0, 0.0);
    glTranslatef(xPosBumi, 0.0, 0.0);
    glColor3ub(0, 161, 241);
    glutSolidSphere(radiusBumi, 50, 50); 

    drawBuilding(); 

    //---------( bulan)---------
    glPushMatrix();
    glRotatef(angleBumi, 0.0, 1.0, 0.0);
    glTranslatef(0.4, 0.0, 0.0);
    glColor3ub(207, 207, 207);
    glutSolidSphere(0.1, 50, 50);
    glPopMatrix();
    glPopMatrix();

    // ---------( Mars)--------
    glPushMatrix();
    angleMars += 1.10; 
    glRotatef(angleMars, 0.0, 1.0, 0.0);
    glTranslatef(xPosMars, 0.0, 0.0);
    glColor3ub(223, 129, 129);
    glutSolidSphere(radiusMars, 50, 50);
    glPopMatrix();

    glutSwapBuffers(); 
}

//--------DINI--------
// ----------(Timer untuk animasi)--------
void timer(int value) {
    glutPostRedisplay();
    glutTimerFunc(1000 / 60, timer, 0);
}

// ----------(Kontrol keyboard)--------
void myKeyboard(unsigned char key, int x, int y) {
    switch (key) {
    case 'A': case 'a': POV = 1; break; 
    case 'Z': case 'z': POV = 0; break; 
    case 'M': radiusMerqurius += 0.01; break; 
    case 'm': radiusMerqurius -= 0.01; break; 
    case 'H': xPosMerqurius -= 0.1; break; 
    case 'h': xPosMerqurius += 0.1; break; 
    case 'V': radiusVenus += 0.01; break; 
    case 'v': radiusVenus -= 0.01; break; 
    case 'J': xPosVenus -= 0.1; break; 
    case 'j': xPosVenus += 0.1; break; 
    case 'B': radiusBumi += 0.01; break; 
    case 'b': radiusBumi -= 0.01; break; 
    case 'K': xPosBumi -= 0.1; break; 
    case 'k': xPosBumi += 0.1; break; 
    case 'R': radiusMars += 0.01; break; 
    case 'r': radiusMars -= 0.01; break; 
    case 'L': xPosMars -= 0.1; break; 
    case 'l': xPosMars += 0.1; break; 
    case 'C': case 'c': showCartecius = !showCartecius; break; 
    default: return;
    }
    glutPostRedisplay();
}

// ----------(Inisialisasi program)--------
void init() {
    glEnable(GL_DEPTH_TEST);
    glEnable(GL_COLOR_MATERIAL);

    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(45.0, 1.0, 1.0, 100.0);
    glMatrixMode(GL_MODELVIEW);
    glClearColor(0.0, 0.0, 0.0, 0.0); 

    initStars(); 
}

// ----------(Fungsi utama)--------
int main(int argc, char *argv[]) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
    glutInitWindowSize(800, 600);
    glutInitWindowPosition(100, 100);
    glutCreateWindow("Simulasi Tata Surya");
    init(); 
    glutDisplayFunc(display); 
    glutKeyboardFunc(myKeyboard); 
    glutTimerFunc(1000 / 60, timer, 0); 
    glutMainLoop();

    return 0; 
}
